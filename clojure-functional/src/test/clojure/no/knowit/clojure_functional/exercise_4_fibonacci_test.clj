(ns no.knowit.clojure-functional.exercise-4-fibonacci-test
  (:use [clojure.test]))

;; http://projecteuler.net/problem=2
;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
;
;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;
;; By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


;; Implement classical fibonnacci, the slow one!
;; f(x) = f(x - 1) + f(x - 2) where f(1) = 1 and f(0) = 0
(def fib-slow
  (fn [num]
    (if (< num 2) num
      (+ (fib-slow (- num 1))
        (fib-slow (- num 2))))))

;; Create a memoized version of fib-slow
(def fib-mem
  (memoize (fn [num]
             (if (< num 2) num
               (+ (fib-mem (- num 1))
                 (fib-mem (- num 2)))))))

;; Create a tail call optimized version of fiboncacci
;; f(n) = fr(n, 0, 1)
;; fr(n, b, a) = fr(n-1, a + b, b) where fr(1) = 1 and fr(0) = 0
(defn fib-tail [num]
  (loop [num num, b 1N a 0N]
    (if (< num 2) a
      (recur (dec num) (+ a b) b))))

;; Create a lazy sequence of fibonacci numbers.
;; Create a function which calls itself lazily (lazy-seq).
;; This should be the natural way to calculate fibonnaci.
(defn fib-lazy []
  ((fn f [a b]
     (cons a
       (lazy-seq
         (f b (+ a b)))))
    0N 1N))

(defn f-range
  "Creates an infinite and lazy range of numbers calculated with f"
  [f] (map f (range)))

(defn even-nums
  "Filters collection for even numbers"
  [coll] (filter even? coll))

(defn contents-less-than
  "Returns a collection with numbers less than the limit"
  [limit coll] (take-while #(> limit %) coll))

;; Solution to euler to. Delete this if you want to try for yourself. The task however is to implement fibonacci.
(defn euler-two [limit f]
  (apply +
    (contents-less-than limit
      (even-nums (f)))))


(deftest euler-two-fibonacci-sum
  (is (= (euler-two 40 #(f-range fib-slow)) 44))
  (is (= (euler-two 4000000 #(f-range fib-mem)) 4613732))
  (is (= (euler-two 4000000 #(f-range fib-tail)) 4613732))
  (is (= (euler-two 4000000 fib-lazy) 4613732))
  (is (= (euler-two Long/MAX_VALUE fib-lazy) 3770056902373173214)))

(run-tests)